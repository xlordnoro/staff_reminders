<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Staff Reminders</title>
  <style>
    #debug-message {
      padding-top: 20px;
      font-size: 20px;
      color: red;
    }

    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      height: 100vh;
      margin: 0;
      transition: background-color 0.3s ease; /* Transition for smooth theme change */
    }

    #header {
      display: flex;
      justify-content: flex-end;
      align-items: center; /* Center vertically */
      align-self: stretch;
      padding: 10px;
      padding-right: 20px; /* Add padding to the right */
      position: fixed;
      bottom: 0;
      right: 0;
      background-color: #fff; /* Set background color for the header */
      z-index: 0; /* Set a higher z-index to appear above other elements */
      transition: background-color 0.3s ease; /* Transition for smooth theme change */
    }

    #header label {
      margin-right: 10px; /* Add margin to the right of the label */
    }

    #lists-container {
      display: flex;
    }

    #noMoreList, #needMoreList {
      margin: 0 20px;
    }

    ul {
      list-style-type: none;
      padding: 0px;
    }

    h1 {
      padding: 0px;
    }

    ul li {
      margin-bottom: 5px;
      list-style-type: disc;
      font-size: 20px;
      padding-top: 0px;
    }

    #textbox-container {
      text-align: center;
      margin-top: 0px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    select {
      margin-top: 0px;
    }
    
    body.light {
      background-color: #f5f5f5; /* Light background color */
      color: #333; /* Light text color */
    }

    body.dark {
      background-color: #000000; /* Dark background color */
      color: #fff; /* Dark text color */
    }

    #header.light {
      background-color: #f5f5f5; /* Light background color for header */
      color: #333; /* Light text color for header */
    }

    #header.dark {
      background-color: #000000; /* Dark background color for header */
      color: #fff; /* Dark text color for header */
    }

    #progress-bar-container {
      width: 100%; /* Set the width to 100% to match the textbox container */
      height: 20px;
      margin-top: 10px;
      overflow: hidden;
      background-color: #ddd; /* Default background color for progress bar */
      border-radius: 5px;
    }

    #progress-bar {
      height: 100%;
      width: 0;
      background-color: #4CAF50; /* Default progress bar color */
      transition: width 1s ease; /* Animation for smooth width changes */
    }
  </style>
</head>
<body>
  <div id="header">
    <label for="theme">Theme:</label>
    <select id="theme" name="theme" onchange="changeTheme(this.value)">
      <option value="light">Light</option>
      <option value="dark">Dark</option>
    </select>
  </div>

  <div id="lists-container">
    <div id="noMoreList">
      <h1>No More List:</h1>
      <ul>
        <% for (const item of itemList) { %>
          <li><%= item %></li>
        <% } %>
      </ul>
    </div>

    <div id="needMoreList">
      <h1>Need More List:</h1>
      <ul>
        <% for (const item of needMoreList) { %>
          <li><%= item %></li>
        <% } %>
      </ul>
    </div>
  </div>

  <div id="textbox-container">
    <form action="/updateList" method="post">
      <label for="item">Item:</label>
      <input type="text" id="item" name="item" required>

      <label for="action">Action:</label>
      <select id="action" name="action" required>
        <option value="add">Add to No More List</option>
        <option value="subtract">Subtract from No More List</option>
        <option value="addMore">Add to Need More List</option>
        <option value="subtractMore">Subtract from Need More List</option>
      </select>

      <button type="submit">Submit</button>
    </form>

    <div id="progress-bar-container">
      <div id="progress-bar"></div>
    </div>
  </div>
  </div>

  <div id="countdown"></div>

    <!-- Display the debug message if it exists -->
    <% if (debugMessage) { %>
      <div id="debug-message">
        <%= debugMessage %>
        <script>
          // Remove the debug message after 3 seconds
          setTimeout(() => {
            const debugMessageElement = document.getElementById('debug-message');
            if (debugMessageElement) {
              debugMessageElement.parentNode.removeChild(debugMessageElement);
            }
          }, 3000);
        </script>
      </div>
    <% } %>
  </div>

  <script>
    // Function to change the theme
    function changeTheme(theme) {
      const body = document.body;
      const header = document.getElementById('header');
      const themeDropdown = document.getElementById('theme');
  
      // Store the theme preference in local storage
      localStorage.setItem('theme', theme);
  
      body.classList.remove('light', 'dark');
      header.classList.remove('light', 'dark');
  
      // Apply the selected theme to body and header
      body.classList.add(theme);
      header.classList.add(theme);
  
      // Update the selected theme in the dropdown
      themeDropdown.value = theme;
    }
  
    // Function to retrieve the stored theme preference
    function applyStoredTheme() {
      const storedTheme = localStorage.getItem('theme');
      if (storedTheme) {
        const body = document.body;
        const header = document.getElementById('header');
        const themeDropdown = document.getElementById('theme');
  
        body.classList.remove('light', 'dark');
        header.classList.remove('light', 'dark');
  
        body.classList.add(storedTheme);
        header.classList.add(storedTheme);
  
        // Update the selected theme in the dropdown
        themeDropdown.value = storedTheme;
      }
    }
  
    // Apply the stored theme on page load
    applyStoredTheme();

    // Function to refresh the page after the countdown
    function refreshPageAfterCountdown() {
      // Check if the URL contains "/updateList"
      if (window.location.href.includes('/updateList')) {
        hideProgressBarContainer();
        return; // Do not initiate countdown if updating the list
      }

      // Set the countdown duration in seconds (2 minutes = 120 seconds)
      const countdownDuration = 120;

      // Display the initial countdown value
      let countdownValue = countdownDuration;
      updateCountdownDisplay(countdownValue);

      // Update the countdown every second
      const countdownInterval = setInterval(() => {
        countdownValue--;

        // Update the countdown display
        updateCountdownDisplay(countdownValue);

        // Check if the countdown has reached zero
        if (countdownValue <= 0) {
          // Stop the countdown interval
          clearInterval(countdownInterval);

          // Refresh the page
          location.reload();
        }
      }, 1000);

      // Function to update the countdown display
      function updateCountdownDisplay(value) {
        const countdownDisplay = document.getElementById('countdown');
        if (countdownDisplay) {
          countdownDisplay.textContent = `Refreshing in ${value} seconds`;

          // Get the current theme class applied to the body
          const currentTheme = document.body.classList.contains('dark') ? 'dark' : 'light';

          // Apply styles based on the theme
          countdownDisplay.style.fontSize = '16px'; // Adjust as needed
          countdownDisplay.style.color = currentTheme === 'dark' ? '#fff' : '#000';
        }

        // Update the progress bar
        updateProgressBar(countdownValue, countdownDuration);
      }
    }

    function hideProgressBarContainer() {
      const progressBarContainer = document.getElementById('progress-bar-container');
      if (progressBarContainer) {
        progressBarContainer.style.display = 'none';
      }
    }

    function updateProgressBar(value, max) {
      const progressBar = document.getElementById('progress-bar');
      if (progressBar) {
        const percentage = (1 - value / max) * 100;
        progressBar.style.width = `${percentage}%`;

        // Get the current theme class applied to the body
        const currentTheme = document.body.classList.contains('dark') ? 'dark' : 'light';

        // Apply styles based on the theme
        progressBar.style.backgroundColor = currentTheme === 'dark' ? '#fff' : '#000';
      }
    }

    document.addEventListener('DOMContentLoaded', refreshPageAfterCountdown);
  </script>
</body>
</html>